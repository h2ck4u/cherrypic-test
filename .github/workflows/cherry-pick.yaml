name: Safe Auto Cherry-Pick

on:
  pull_request:
    types:
      - closed

jobs:
  cherry-pick:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Detect cherry-pick label
        id: detect
        run: |
          label=$(echo '${{ toJson(github.event.pull_request.labels) }}' | jq -r '.[] | select(.name | startswith("cherry-pick-")) | .name' || true)
          echo "LABEL=$label" >> $GITHUB_ENV

      - name: Exit if no cherry-pick label
        if: env.LABEL == ''
        run: echo "No cherry-pick label found. Skipping..."

      - name: Prepare cherry-pick branch
        if: env.LABEL != ''
        run: |
          TARGET_BRANCH=$(echo "$LABEL" | sed 's/^cherry-pick-//')
          ORIGINAL_BRANCH="${{ github.event.pull_request.head.ref }}"
          CHERRYPICK_BRANCH="${ORIGINAL_BRANCH}-cherrypick"

          git fetch origin $TARGET_BRANCH

          git checkout -b $CHERRYPICK_BRANCH origin/$TARGET_BRANCH

          echo "TARGET_BRANCH=$TARGET_BRANCH" >> $GITHUB_ENV
          echo "CHERRYPICK_BRANCH=$CHERRYPICK_BRANCH" >> $GITHUB_ENV

      - name: Cherry-pick all commits from PR (force incoming changes)
        if: env.LABEL != ''
        run: |
          COMMITS=$(git log origin/${{ github.event.pull_request.head.ref }} ^origin/${{ github.event.pull_request.base.ref }} --pretty=format:"%H" --reverse)
          for COMMIT in $COMMITS; do
            # Skip merge commits
            PARENTS=$(git rev-list --parents -n 1 $COMMIT | wc -w)
            if [ "$PARENTS" -gt 2 ]; then
              echo "‚ö†Ô∏è Skipping merge commit: $COMMIT"
              continue
            fi

            echo "üîÑ Cherry-picking $COMMIT"
            if ! git cherry-pick -x $COMMIT; then
              echo "‚ö†Ô∏è Conflict detected. Auto-resolving in favor of incoming changes..."

              FILES=$(git diff --name-only --diff-filter=U)

              if [ -z "$FILES" ]; then
                echo "‚ùå No conflicted files found. Aborting."
                git cherry-pick --abort
                break
              fi

              echo "$FILES" | xargs git checkout --theirs
              git add .

              if ! git cherry-pick --continue; then
                echo "‚ùå Failed to continue cherry-pick after auto-resolving"
                git cherry-pick --abort
                break
              fi
            fi
          done

      - name: Push and create PR
        if: env.LABEL != ''
        run: |
          ORIGINAL_TITLE=$(gh pr view ${{ github.event.pull_request.number }} --json title -q '.title')

          git push origin $CHERRYPICK_BRANCH

          BODY=$(cat <<EOF
          ÏûêÎèô cherry-pickÎêú PRÏûÖÎãàÎã§. ÏõêÎ≥∏: #${{ github.event.pull_request.number }}

          ‚ö†Ô∏è Ï∂©ÎèåÏù¥ Î∞úÏÉùÌñàÏùÑ Ïàò ÏûàÏúºÎ©∞ ÏûêÎèôÏúºÎ°ú incoming changes Í∏∞Ï§ÄÏúºÎ°ú Î≥ëÌï©ÎêòÏóàÏäµÎãàÎã§.
          EOF
              )

          NEW_PR_URL=$(gh pr create \
            --title "$ORIGINAL_TITLE" \
            --body "$BODY" \
            --base "$TARGET_BRANCH" \
            --head "$CHERRYPICK_BRANCH")

          # Add 'cherry-pick' label to new PR
          NEW_PR_NUMBER=$(echo "$NEW_PR_URL" | grep -oE '[0-9]+$')
          gh pr edit "$NEW_PR_NUMBER" --add-label "auto-cherry-pick"
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

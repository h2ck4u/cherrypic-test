name: Auto Cherry-Pick

on:
  pull_request:
    types:
      - closed

  workflow_dispatch:
    inputs:
      pr_number:
        description: "Pull Request Number to cherry-pick from"
        required: true
      label:
        description: "Target label (e.g. cherry-pick-qa)"
        required: true

jobs:
  cherry-pick:
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine PR context (auto or manual)
        id: context
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "PR_NUMBER=${{ github.event.inputs.pr_number }}" >> $GITHUB_ENV
            echo "LABEL=${{ github.event.inputs.label }}" >> $GITHUB_ENV
          else
            echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
            label=$(echo '${{ toJson(github.event.pull_request.labels) }}' | jq -r '.[] | select(.name | startswith("cherry-pick-")) | .name' || true)
            echo "LABEL=$label" >> $GITHUB_ENV
          fi

      - name: Exit if no cherry-pick label
        if: env.LABEL == ''
        run: echo "‚ùå No cherry-pick label found. Skipping..." && exit 0

      - name: Prepare cherry-pick branch
        run: |
          TARGET_BRANCH=$(echo "$LABEL" | sed 's/^cherry-pick-//')
          echo "TARGET_BRANCH=$TARGET_BRANCH" >> $GITHUB_ENV

          ORIGINAL_BRANCH=$(gh pr view "$PR_NUMBER" --json headRefName -q '.headRefName')
          echo "ORIGINAL_BRANCH=$ORIGINAL_BRANCH" >> $GITHUB_ENV

          CHERRYPICK_BRANCH="${ORIGINAL_BRANCH}-cherrypick"
          echo "CHERRYPICK_BRANCH=$CHERRYPICK_BRANCH" >> $GITHUB_ENV

          git fetch origin $TARGET_BRANCH

          git checkout -b $CHERRYPICK_BRANCH origin/$TARGET_BRANCH
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Cherry-pick all commits from PR (force incoming changes)
        run: |
          COMMITS=$(gh pr view "$PR_NUMBER" --json commits -q '.commits[].oid')
          for COMMIT in $COMMITS; do
            PARENTS=$(git rev-list --parents -n 1 $COMMIT | wc -w)
            if [ "$PARENTS" -gt 2 ]; then
              echo "‚ö†Ô∏è Skipping merge commit: $COMMIT"
              continue
            fi

            echo "üîÑ Cherry-picking $COMMIT"
            if ! git cherry-pick -x $COMMIT; then
              echo "‚ö†Ô∏è Conflict detected. Auto-resolving in favor of incoming changes..."

              FILES=$(git diff --name-only --diff-filter=U)
              if [ -z "$FILES" ]; then
                echo "‚ùå No conflicted files found. Aborting cherry-pick."
                git cherry-pick --abort
                continue
              fi

              echo "$FILES" | xargs git checkout --theirs
              git add .

              if ! git cherry-pick --continue; then
                echo "‚ùå Failed to continue cherry-pick after auto-resolving"
                git cherry-pick --abort
                continue
              fi
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Push and create PR
        run: |
          ORIGINAL_TITLE=$(gh pr view "$PR_NUMBER" --json title -q '.title')

          git push origin $CHERRYPICK_BRANCH

          BODY=$(cat <<EOF
          ÏûêÎèô cherry-pickÎêú PRÏûÖÎãàÎã§. ÏõêÎ≥∏: #$PR_NUMBER

          ‚ö†Ô∏è Ï∂©ÎèåÏù¥ Î∞úÏÉùÌñàÏùÑ Ïàò ÏûàÏúºÎ©∞ ÏûêÎèôÏúºÎ°ú incoming changes Í∏∞Ï§ÄÏúºÎ°ú Î≥ëÌï©ÎêòÏóàÏäµÎãàÎã§.
          EOF
          )

          NEW_PR_URL=$(gh pr create \
            --title "$ORIGINAL_TITLE" \
            --body "$BODY" \
            --base "$TARGET_BRANCH" \
            --head "$CHERRYPICK_BRANCH")

          NEW_PR_NUMBER=$(echo "$NEW_PR_URL" | grep -oE '[0-9]+$')
          gh pr edit "$NEW_PR_NUMBER" --add-label "auto-cherry-pick"
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
